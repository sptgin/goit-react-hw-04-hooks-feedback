{"version":3,"sources":["components/FeedbackOptions.js","components/Notification.js","components/Statistics.js","components/Section.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","className","map","name","type","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","defaultProps","Section","title","children","App","useState","setGood","setNeutral","setBad","countTotalFeedback","event","currentTarget","parseInt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUAmBeA,MAhBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,qBAAKC,UAAU,qBAAf,SACGF,EAAQG,KAAI,SAAAC,GAAI,OACf,wBACEC,KAAK,SACLD,KAAMA,EACNE,QAASL,EACTC,UAAU,mBAJZ,SAMGE,U,MCHIG,MAPf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OACE,qBAAKN,UAAU,eAAf,SACE,4BAAIM,OCFV,SAASC,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,8BACGD,EAAQ,EACP,gCACE,uCACQ,+BAAOH,OAEf,0CACW,+BAAOC,OAElB,sCACO,+BAAOC,OAEd,wCACS,+BAAOC,OAEhB,oDACqB,iCAAOC,EAAP,eAIvB,cAAC,EAAD,CAAcN,QAAQ,wBAM9BC,EAAWM,aAAe,CACxBL,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GAUPL,Q,MC7BAO,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,sBAAKhB,UAAU,gBAAf,UACGe,GAAS,6BAAKA,IACdC,M,MCFQ,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOT,EAAP,KAAgBW,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOR,EAAP,KAAYW,EAAZ,KAuBMC,EAAqB,WACzB,OAAOd,EAAOC,EAAUC,GAO1B,OACE,gCACE,oBAAIV,UAAU,eAAd,mCACA,cAAC,EAAD,CAASe,MAAM,wBAAf,SACE,cAAC,EAAD,CACEjB,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAnCc,SAAAwB,GAGpB,OAFaA,EAAMC,cAActB,MAG/B,IAAK,OACHiB,EAAQX,EAAO,GACf,MAEF,IAAK,UACHY,EAAWX,EAAU,GACrB,MAEF,IAAK,MACHY,EAAOX,EAAM,GACb,MAEF,QACE,aAqBF,cAAC,EAAD,CAASK,MAAM,aAAf,SACE,cAAC,EAAD,CACEP,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOW,IACPV,mBAlBCa,SAAUjB,EAAOc,IAAwB,YChCpDI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.eacd3d95.chunk.js","sourcesContent":["import React from 'react';\nimport './FeedbackOptions.css';\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div className=\"feedback__controls\">\n      {options.map(name => (\n        <button\n          type=\"button\"\n          name={name}\n          onClick={onLeaveFeedback}\n          className=\"feedback__button\"\n        >\n          {name}\n        </button>\n      ))}\n    </div>\n  );\n}\nexport default FeedbackOptions;\n","import React from 'react';\nimport './Notification.css';\n\nfunction Notification({ message }) {\n  return (\n    <div className=\"notification\">\n      <p>{message}</p>\n    </div>\n  );\n}\nexport default Notification;\n","import React from 'react';\nimport Notification from './Notification';\nimport PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <div>\n      {total > 0 ? (\n        <div>\n          <p>\n            Good: <span>{good}</span>\n          </p>\n          <p>\n            Neutral: <span>{neutral}</span>\n          </p>\n          <p>\n            Bad: <span>{bad}</span>\n          </p>\n          <p>\n            Total: <span>{total}</span>\n          </p>\n          <p>\n            Positive Feedback: <span>{positivePercentage} % </span>\n          </p>\n        </div>\n      ) : (\n        <Notification message=\"No feedback given\"></Notification>\n      )}\n    </div>\n  );\n}\n\nStatistics.defaultProps = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n  total: 0,\n  positivePercentage: 0,\n};\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport './Section.css';\nimport PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <div className=\"task__section\">\n      {title && <h2>{title}</h2>}\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React, { useState } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Section from './components/Section';\nimport './App.css';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countFeedback = event => {\n    const name = event.currentTarget.name;\n\n    switch (name) {\n      case 'good':\n        setGood(good + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n\n      case 'bad':\n        setBad(bad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countGoodFeedback = () => {\n    return parseInt((good / countTotalFeedback()) * 100);\n  };\n\n  return (\n    <div>\n      <h1 className=\"header__main\">React HW 004 Feedback</h1>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={countFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          positivePercentage={countGoodFeedback()}\n        />\n      </Section>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}